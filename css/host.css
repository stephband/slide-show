
:host {
    /**
    --slide-duration
    Sets the display duration of a slide when the slideshow has
    `controls="autoplay"` enabled. May be a CSS time value in `s` or `ms`.

    ```css
    slide-show > img {
        --slide-duration: 12s;
    }
    ```

    If applied to the `slide-show` itself, sets the display duration of all
    slides.

    ```css
    slide-show {
        --slide-duration: 12s;
    }
    ```
    **/
    --slide-duration: 8s;

    /**
    --padding-left
    Adjusts the space to the left of the leftmost slide, and the alignment
    position of slides set to `scroll-snap-align: start`. (Internally it sets
    both `padding-left` and `scroll-padding-left` while enabling a workaround for
    some browser inconsistencies.)

    ```css
    slide-show {
        --padding-left: 3rem;
    }
    ```
    **/
    --padding-left: 0;

    /**
    --padding-right
    Adjusts the space to the right of the rightmost slide, and the alignment
    position of slides set to `scroll-snap-align: end`. (Internally it sets
    both `padding-right` and `scroll-padding-right` while enabling a workaround
    for some browser inconsistencies.)

    ```css
    slide-show {
        --padding-right: 3rem;
    }
    ```
    **/
    --padding-right: 0;

    position: relative;

    /* Must override anything applied to :fullscreen, however must not be
       !important as that can't be overridden externally, I don't think. */
    display: flex;
    flex-direction: column;

    /* [part="slides"] takes over viewport duties */
    padding-left:  0 !important;
    padding-right: 0 !important;

    /* Put content in the center, useful when slide-show is bigger than content,
       such as in fullscreen mode. */
    align-content:   center !important;
    align-items:     stretch;
    justify-content: center;
    justify-items:   stretch;

    /* Reset style applied to un-upgraded slide-show  */
    grid-auto-flow: row !important;

    /* Make the [part="slides"] element inhabit full width. On [part="slides"],
       grid-template-columns is none-ified so that columns on
       slot[part="slides"] are sized via grid-auto-columns (or by
       grid-template-columns specifically set on :part(slides)). One possible
       way around this, to make grid-template-columns inherit nicely, would be
       to convert :host to display:flex. Maybe. */
    grid-template-columns: 100%;
    /* Make slides full width by default. This is inherited by [part="slides"] > slot. */
    grid-auto-columns:     100%;
    column-gap:            0;
    grid-auto-rows:        auto;
    /*grid-template-rows:    1fr;*/
    row-gap:               0;

    scroll-snap-type: none !important;
    scroll-snap-stop: none !important;

    /* Inherited by [part="slides"], overridable from outer DOM */
    -webkit-scroll-behavior: smooth;
            scroll-behavior: smooth;

    overscroll-behavior-x: none !important;
    -ms-overflow-style: none !important; /* IE 11 */
    scrollbar-width: none !important; /* Firefox 64 */
    overflow: visible;
}

:host([hidden]) {
    display: none;
}

:host > [part="slides"],
:host > [part="controls"] {
    align-self: stretch;
}

:host > [part="slides"] {
    width: 100%;
    height: 100%;
    justify-self: stretch;
}

:host > [part="controls"] {
    justify-self: auto;
}

:host(:focus) {
    outline-width: 0;
}

:host(:focus-visible) {
    outline-width: 1px;
}

@supports not selector(:focus-visible) {
    :host(:focus) {
        outline-width: 1px;
    }
}


.invisible {
    /* Keep content accessible but not visible. */
    position: absolute;
    clip: rect(0 0 0 0);
    -webkit-clip-path: inset(50%);
            clip-path: inset(50%);
    width: 1px;
    height: 1px;
    padding: 0;
    margin: 0 -1px -1px 0;
    overflow: hidden;
    white-space: nowrap;
    border-width: 0;
}
